"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.crawlServerEntry = crawlServerEntry;
// Use Node.js to search for the file dist/server/entry.js which we use only as fallback if:
// - the server entry isn't injected (the setting `inject` is `false`), and
// - the auto importer doesn't work (Yarn PnP users and pnpm edge cases).
const utils_1 = require("./utils");
const import_1 = require("@brillout/import");
const serverEntryFileNameBase_1 = require("../shared/serverEntryFileNameBase");
async function crawlServerEntry(outDir) {
    const cwd = (0, utils_1.getCwd)();
    if (!cwd)
        return false;
    let path;
    let fs;
    try {
        path = await (0, import_1.import_)('path');
        fs = await (0, import_1.import_)('fs');
    }
    catch {
        return false;
    }
    const isPathAbsolute = (p) => {
        if (process.platform === 'win32') {
            return path.win32.isAbsolute(p);
        }
        else {
            return p.startsWith('/');
        }
    };
    if (outDir) {
        // Only pre-rendering has access to config.build.outDir
        (0, utils_1.assertPosixPath)(outDir);
        (0, utils_1.assert)(isPathAbsolute(outDir), outDir);
    }
    else {
        // The SSR server doesn't have access to config.build.outDir so we shoot in the dark by trying with 'dist/'
        outDir = path.posix.join(cwd, 'dist');
    }
    const serverEntryFileDir = path.posix.join(outDir, 'server');
    if (!fs.existsSync(serverEntryFileDir))
        return false;
    let filename;
    try {
        filename = __filename;
    }
    catch {
        // __filename isn't defined when this file is being bundled into an ESM bundle
        return false;
    }
    let serverEntryFilePath = null;
    const entryFileCandidates = [
        `${serverEntryFileNameBase_1.serverEntryFileNameBase}.mjs`,
        `${serverEntryFileNameBase_1.serverEntryFileNameBase}.js`,
        `${serverEntryFileNameBase_1.serverEntryFileNameBase}.cjs`,
        `${serverEntryFileNameBase_1.serverEntryFileNameBaseAlternative}.mjs`,
        `${serverEntryFileNameBase_1.serverEntryFileNameBaseAlternative}.js`,
        `${serverEntryFileNameBase_1.serverEntryFileNameBaseAlternative}.cjs`
    ];
    for (const entryFileName of entryFileCandidates) {
        const serverEntryFilePathSpeculative = path.posix.join(serverEntryFileDir, entryFileName);
        try {
            serverEntryFilePath = await (0, utils_1.requireResolve)(serverEntryFilePathSpeculative, filename);
        }
        catch { }
    }
    (0, utils_1.assertUsage)(serverEntryFilePath, `Cannot find server entry. If you use rollupOptions.output.entryFileNames then make sure to not rename the server entry file. Make sure that one of the following exists: \n${entryFileCandidates.map((e) => `  ${e}`).join('\n')}`);
    // webpack couldn't have properly resolved distImporterPath (since there is not static import statement)
    if ((0, utils_1.isWebpackResolve)(serverEntryFilePath)) {
        return false;
    }
    await (0, import_1.import_)(serverEntryFilePath);
    return true;
}
