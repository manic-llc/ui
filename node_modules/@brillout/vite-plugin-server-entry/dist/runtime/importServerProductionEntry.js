"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.importServerProductionEntry = importServerProductionEntry;
const utils_1 = require("./utils");
const debugLogsRuntime_1 = require("./debugLogsRuntime");
const debug_1 = require("../shared/debug");
const crawlServerEntry_1 = require("./crawlServerEntry");
async function importServerProductionEntry({ tolerateNotFound, outDir } = {}) {
    const autoImporter = require('./autoImporter.js');
    (0, debugLogsRuntime_1.debugLogsRuntimePre)(autoImporter);
    (0, utils_1.assertUsage)(autoImporter.status !== 'DISABLED_BY_INJECT', "As a library author, make sure your library doesn't call importServerProductionEntry() when using `inject: true`");
    let success = false;
    let requireError;
    let isOutsideOfCwd = null;
    if (autoImporter.status === 'SET') {
        try {
            await autoImporter.loadServerEntry();
            success = true;
        }
        catch (err) {
            if (debug_1.DEBUG) {
                requireError = err;
            }
            else {
                throw err;
            }
        }
        isOutsideOfCwd = isServerEntryOutsideOfCwd(autoImporter.paths);
        if (isOutsideOfCwd) {
            success = false;
        }
    }
    if (!success) {
        success = await (0, crawlServerEntry_1.crawlServerEntry)(outDir);
    }
    // We don't handle the following case:
    //  - When the user directly imports dist/server/entry.js because we assume that Vike and Telefunc don't call importServerProductionEntry() in that case
    (0, debugLogsRuntime_1.debugLogsRuntimePost)({ success, requireError, isOutsideOfCwd, outDir });
    if (tolerateNotFound) {
        return success;
    }
    else {
        (0, utils_1.assertUsage)(success, 'The server production entry is missing. (Re-)build your app and try again. If you still get this error, then you need to manually import the server production entry, see https://github.com/brillout/vite-plugin-server-entry#manual-import');
        return null;
    }
}
// dist/server/entry.js may not belong to process.cwd() if e.g. Vike is linked => autoImporter.js can potentially be shared between multiple projects
function isServerEntryOutsideOfCwd(paths) {
    const cwd = (0, utils_1.getCwd)();
    // We cannot check edge environments. Upon edge deployment the server code is usually bundled right after `$ vite build`, so it's unlikley that the resolved serverEntryFilePath doesn't belong to cwd
    if (!cwd)
        return null;
    let serverEntryFilePath;
    try {
        serverEntryFilePath = paths.serverEntryFilePathResolved();
    }
    catch {
        // Edge environments usually(/always?) don't support require.resolve()
        //  - This code block is called for edge environments that return a dummy process.cwd(), e.g. Cloudflare Workers: process.cwd() === '/'
        return null;
    }
    if ((0, utils_1.isWebpackResolve)(serverEntryFilePath))
        return null;
    serverEntryFilePath = (0, utils_1.toPosixPath)(serverEntryFilePath);
    (0, utils_1.assertPosixPath)(cwd);
    return !serverEntryFilePath.startsWith(cwd);
}
