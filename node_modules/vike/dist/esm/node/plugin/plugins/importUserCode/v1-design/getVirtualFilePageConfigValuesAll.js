export { getVirtualFilePageConfigValuesAll };
import { assert } from '../../../utils.js';
import { getVirtualFileIdPageConfigValuesAll, isVirtualFileIdPageConfigValuesAll } from '../../../../shared/virtual-files/virtualFilePageConfigValuesAll.js';
import { getVikeConfig } from './getVikeConfig.js';
import { extractAssetsAddQuery } from '../../../../shared/extractAssetsQuery.js';
import { debug } from './debug.js';
import { isRuntimeEnvMatch } from './isRuntimeEnvMatch.js';
import { serializeConfigValues } from '../../../../../shared/page-configs/serialize/serializeConfigValues.js';
import { getConfigVike } from '../../../../shared/getConfigVike.js';
import { fixServerAssets_isEnabled } from '../../buildConfig/fixServerAssets.js';
import { getConfigValueBuildTime } from '../../../../../shared/page-configs/getConfigValueBuildTime.js';
async function getVirtualFilePageConfigValuesAll(id, isDev, config) {
    const result = isVirtualFileIdPageConfigValuesAll(id);
    assert(result);
    /* This assertion fails when using includeAssetsImportedByServer
    {
      const isForClientSide = !config.build.ssr
      assert(result.isForClientSide === isForClientSide)
    }
    */
    const { pageId, isForClientSide } = result;
    const { pageConfigs } = await getVikeConfig(config, isDev, { tolerateInvalidConfig: true });
    const pageConfig = pageConfigs.find((pageConfig) => pageConfig.pageId === pageId);
    assert(pageConfig, { id, pageId });
    const configVike = await getConfigVike(config);
    const code = getLoadConfigValuesAll(pageConfig, isForClientSide, pageId, configVike.includeAssetsImportedByServer, isDev);
    debug(id, isForClientSide ? 'CLIENT-SIDE' : 'SERVER-SIDE', code);
    return code;
}
function getLoadConfigValuesAll(pageConfig, isForClientSide, pageId, includeAssetsImportedByServer, isDev) {
    const lines = [];
    const importStatements = [];
    const isClientRouting = getConfigValueBuildTime(pageConfig, 'clientRouting', 'boolean')?.value ?? false;
    lines.push('export const configValuesSerialized = {');
    lines.push(...serializeConfigValues(pageConfig, importStatements, (configEnv) => isRuntimeEnvMatch(configEnv, { isForClientSide, isClientRouting, isDev }), { isEager: false }, ''));
    lines.push('};');
    if (!fixServerAssets_isEnabled() && includeAssetsImportedByServer && isForClientSide && !isDev) {
        importStatements.push(`import '${extractAssetsAddQuery(getVirtualFileIdPageConfigValuesAll(pageId, false))}'`);
    }
    const code = [...importStatements, ...lines].join('\n');
    return code;
}
