export { getVirtualFilePageConfigs };
import { getVirtualFileIdPageConfigValuesAll } from '../../../../shared/virtual-files/virtualFilePageConfigValuesAll.js';
import { debug } from './debug.js';
import { getVikeConfig } from './getVikeConfig.js';
import { isRuntimeEnvMatch } from './isRuntimeEnvMatch.js';
import { serializeConfigValues } from '../../../../../shared/page-configs/serialize/serializeConfigValues.js';
async function getVirtualFilePageConfigs(isForClientSide, isDev, id, isClientRouting, config) {
    const { pageConfigs, pageConfigGlobal } = await getVikeConfig(config, isDev, { tolerateInvalidConfig: true });
    return getCode(pageConfigs, pageConfigGlobal, isForClientSide, isDev, id, isClientRouting);
}
function getCode(pageConfigs, pageConfigGlobal, isForClientSide, isDev, id, isClientRouting) {
    const lines = [];
    const importStatements = [];
    lines.push('export const pageConfigsSerialized = [');
    lines.push(getCodePageConfigsSerialized(pageConfigs, isForClientSide, isClientRouting, isDev, importStatements));
    lines.push('];');
    lines.push('export const pageConfigGlobalSerialized = {');
    lines.push(getCodePageConfigGlobalSerialized(pageConfigGlobal, isForClientSide, isClientRouting, isDev, importStatements));
    lines.push('};');
    const code = [...importStatements, ...lines].join('\n');
    debug(id, isForClientSide ? 'CLIENT-SIDE' : 'SERVER-SIDE', code);
    return code;
}
function getCodePageConfigsSerialized(pageConfigs, isForClientSide, isClientRouting, isDev, importStatements) {
    const lines = [];
    pageConfigs.forEach((pageConfig) => {
        const { pageId, routeFilesystem, isErrorPage } = pageConfig;
        const virtualFileIdPageConfigValuesAll = getVirtualFileIdPageConfigValuesAll(pageId, isForClientSide);
        lines.push(`  {`);
        lines.push(`    pageId: ${JSON.stringify(pageId)},`);
        lines.push(`    isErrorPage: ${JSON.stringify(isErrorPage)},`);
        lines.push(`    routeFilesystem: ${JSON.stringify(routeFilesystem)},`);
        lines.push(`    loadConfigValuesAll: () => import(${JSON.stringify(virtualFileIdPageConfigValuesAll)}),`);
        lines.push(`    configValuesSerialized: {`);
        lines.push(...serializeConfigValues(pageConfig, importStatements, (configEnv) => isRuntimeEnvMatch(configEnv, { isForClientSide, isClientRouting, isDev }), { isEager: true }, '    '));
        lines.push(`    },`);
        lines.push(`  },`);
    });
    const code = lines.join('\n');
    return code;
}
function getCodePageConfigGlobalSerialized(pageConfigGlobal, isForClientSide, isClientRouting, isDev, importStatements) {
    const lines = [];
    lines.push(`  configValuesSerialized: {`);
    lines.push(...serializeConfigValues(pageConfigGlobal, importStatements, (configEnv) => isRuntimeEnvMatch(configEnv, { isForClientSide, isClientRouting, isDev }), { isEager: true }, '    '));
    lines.push(`  },`);
    const code = lines.join('\n');
    return code;
}
