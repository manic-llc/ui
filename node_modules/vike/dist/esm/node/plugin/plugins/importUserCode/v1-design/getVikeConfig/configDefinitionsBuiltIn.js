export { configDefinitionsBuiltIn };
export { configDefinitionsBuiltInGlobal };
import { assert, assertUsage } from '../../../../utils.js';
import { getConfigDefinedAt } from '../../../../../../shared/page-configs/getConfigDefinedAt.js';
const configDefinitionsBuiltIn = {
    onRenderHtml: {
        env: { server: true }
    },
    onRenderClient: {
        env: { client: true }
    },
    onHydrationEnd: {
        env: { client: true }
    },
    onPageTransitionStart: {
        env: { client: true }
    },
    onPageTransitionEnd: {
        env: { client: true }
    },
    onBeforeRender: {
        env: { server: true }
    },
    onBeforePrerenderStart: {
        env: { server: true, production: true }
    },
    Page: {
        env: { server: true, client: true }
    },
    passToClient: {
        env: { server: true },
        cumulative: true
    },
    route: {
        env: { server: true, client: 'if-client-routing' },
        eager: true
    },
    guard: {
        env: { server: true, client: 'if-client-routing' }
    },
    data: {
        env: { server: true }
    },
    iKnowThePerformanceRisksOfAsyncRouteFunctions: {
        env: { server: true, client: 'if-client-routing' },
        eager: true
    },
    filesystemRoutingRoot: {
        env: { config: true }
    },
    client: {
        // The value of the client config is merely the file path to the client entry file, which is only needed on the sever-side
        env: { server: true, config: true },
        _valueIsFilePath: true
    },
    clientRouting: {
        // We could make it { client: false } but we don't yet because of some legacy V0.4 design code
        env: { server: true, client: true, config: true },
        eager: true
    },
    clientHooks: {
        env: { config: true }
    },
    prerender: {
        env: { config: true }
    },
    hydrationCanBeAborted: {
        env: { client: true }
    },
    prefetch: {
        env: { client: true },
        eager: true
    },
    // TODO/v1-release: remove
    prefetchStaticAssets: {
        env: { client: true }
    },
    extends: {
        env: { config: true }
    },
    meta: {
        env: { config: true }
    },
    // Whether the page loads:
    //  - Vike's client runtime
    //  - User's client hooks
    // In other words, whether the page is "HTML-only" (https://vike.dev/render-modes). HTML-only pages shouldn't load the client runtime nor client hooks.
    isClientRuntimeLoaded: {
        env: { server: true, client: true },
        eager: true,
        _computed: (configValueSources) => {
            {
                const source = getConfigValueSource(configValueSources, 'clientHooks');
                if (source && source.value !== null) {
                    const { value } = source;
                    const definedAt = getConfigDefinedAt('Config', 'clientHooks', source.definedAtFilePath);
                    assertUsage(typeof value === 'boolean', `${definedAt} should be a boolean`);
                    return value;
                }
            }
            return (isConfigSet(configValueSources, 'onRenderClient') &&
                isConfigSet(configValueSources, 'Page') &&
                !!getConfigEnv(configValueSources, 'Page')?.client);
        }
    },
    onBeforeRenderEnv: {
        env: { client: true },
        eager: true,
        _computed: (configValueSources) => !isConfigSet(configValueSources, 'onBeforeRender') ? null : getConfigEnv(configValueSources, 'onBeforeRender')
    },
    dataEnv: {
        env: { client: true },
        eager: true,
        _computed: (configValueSources) => !isConfigSet(configValueSources, 'data') ? null : getConfigEnv(configValueSources, 'data')
    },
    hooksTimeout: {
        env: { server: true, client: true }
    },
    cacheControl: {
        env: { server: true }
    },
    injectScriptsAt: {
        env: { server: true }
    },
    name: {
        env: { config: true }
    },
    require: {
        env: { config: true }
    },
    keepScrollPosition: {
        env: { client: true }
    }
};
const configDefinitionsBuiltInGlobal = {
    onPrerenderStart: {
        env: { server: true, production: true },
        eager: true
    },
    onBeforeRoute: {
        env: { server: true, client: 'if-client-routing' },
        eager: true
    },
    prerender: {
        env: { config: true }
    },
    disableAutoFullBuild: { env: { config: true } },
    includeAssetsImportedByServer: { env: { config: true } },
    baseAssets: { env: { config: true } },
    baseServer: { env: { config: true } },
    redirects: { env: { server: true } },
    trailingSlash: { env: { server: true } },
    disableUrlNormalization: { env: { server: true } }
};
function getConfigEnv(configValueSources, configName) {
    const configValueSource = getConfigValueSource(configValueSources, configName);
    if (!configValueSource)
        return null;
    const { configEnv } = configValueSource;
    const env = {};
    if (configEnv.client)
        env.client = true;
    if (configEnv.server)
        env.server = true;
    return env;
}
function isConfigSet(configValueSources, configName) {
    const configValueSource = getConfigValueSource(configValueSources, configName);
    // Enable users to suppress global config values by overriding the config's value to null
    if (configValueSource?.value === null)
        return false;
    return !!configValueSource;
}
function getConfigValueSource(configValueSources, configName) {
    const sources = configValueSources[configName];
    if (!sources)
        return null;
    const configValueSource = sources[0];
    assert(configValueSource);
    return configValueSource;
}
