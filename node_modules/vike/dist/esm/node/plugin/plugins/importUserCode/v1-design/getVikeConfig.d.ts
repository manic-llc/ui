export { getVikeConfig };
export { reloadVikeConfig };
export { vikeConfigDependencies };
export { isVikeConfigFile };
export { isV1Design };
export { getConfigValueInterfaceFile };
export type { VikeConfigObject };
export type { InterfaceValueFile };
export type { InterfaceFile };
import type { PageConfigGlobalBuildTime, PageConfigBuildTime } from '../../../../../shared/page-configs/PageConfig.js';
import { type LocationId } from './getVikeConfig/filesystemRouting.js';
import type { ResolvedConfig } from 'vite';
import type { FilePathResolved } from '../../../../../shared/page-configs/FilePath.js';
type InterfaceFile = InterfaceConfigFile | InterfaceValueFile;
type InterfaceFileCommons = {
    locationId: LocationId;
    filePath: FilePathResolved;
    fileExportsByConfigName: Record<ConfigName, {
        configValue?: unknown;
    }>;
};
type InterfaceConfigFile = InterfaceFileCommons & {
    isConfigFile: true;
    isValueFile: false;
    extendsFilePaths: string[];
    isConfigExtend: boolean;
};
type InterfaceValueFile = InterfaceFileCommons & {
    isConfigFile: false;
    isValueFile: true;
    configName: string;
};
type ConfigName = string;
type VikeConfigObject = {
    pageConfigs: PageConfigBuildTime[];
    pageConfigGlobal: PageConfigGlobalBuildTime;
    globalVikeConfig: Record<string, unknown>;
};
declare const vikeConfigDependencies: Set<string>;
declare function reloadVikeConfig(userRootDir: string, outDirRoot: string): void;
declare function getVikeConfig(config: ResolvedConfig, isDev: boolean, { crawlWithGit, tolerateInvalidConfig }?: {
    crawlWithGit?: null | boolean;
    tolerateInvalidConfig?: true;
}): Promise<VikeConfigObject>;
declare function isV1Design(config: ResolvedConfig, isDev: boolean): Promise<boolean>;
declare function isVikeConfigFile(filePath: string): boolean;
declare function getConfigValueInterfaceFile(interfaceFile: InterfaceFile, configName: string): unknown;
