export { renderPageAlreadyRouted };
export { prerenderPage };
export { prerender404Page };
export { getPageContextInitEnhanced };
export { getRenderContext };
export type { RenderContext };
export type { PageContextAfterRender };
export type { PageContextInitEnhanced };
import { type PageFile } from '../../../shared/getPageFiles.js';
import { type PageContextUrlInternal } from '../../../shared/getPageContextUrlComputed.js';
import { HttpResponse } from './createHttpResponse.js';
import { PageContext_loadUserFilesServerSide, type PageFiles } from './loadUserFilesServerSide.js';
import type { PageConfigRuntime, PageConfigGlobalRuntime } from '../../../shared/page-configs/PageConfig.js';
import { type PageRoutes } from '../../../shared/route/loadPageRoutes.js';
import type { Hook } from '../../../shared/hooks/getHook.js';
type PageContextAfterRender = {
    httpResponse: HttpResponse;
    errorWhileRendering: null | Error;
};
declare function renderPageAlreadyRouted<PageContext extends {
    pageId: string;
    _pageContextAlreadyProvidedByOnPrerenderHook?: true;
    is404: null | boolean;
    routeParams: Record<string, string>;
    errorWhileRendering: null | Error;
    _httpRequestId: number;
} & PageContextInitEnhanced & PageContextUrlInternal & PageContext_loadUserFilesServerSide>(pageContext: PageContext): Promise<PageContext & PageContextAfterRender>;
declare function prerenderPage(pageContext: PageContextInitEnhanced & PageFiles & {
    routeParams: Record<string, string>;
    pageId: string;
    _urlRewrite: null;
    _httpRequestId: number | null;
    _usesClientRouter: boolean;
    _pageContextAlreadyProvidedByOnPrerenderHook?: true;
    is404: null | boolean;
}): Promise<{
    documentHtml: string;
    pageContextSerialized: null;
    pageContext: {
        urlOriginal: string;
        headersOriginal?: unknown;
        headers?: unknown;
    } & {
        _objectCreatedByVike: boolean;
        _baseServer: string;
        _baseAssets: string | null;
        _includeAssetsImportedByServer: boolean;
        _pageFilesAll: PageFile[];
        _pageConfigs: PageConfigRuntime[];
        _pageConfigGlobal: PageConfigGlobalRuntime;
        _allPageIds: string[];
        _pageRoutes: PageRoutes;
        _onBeforeRouteHook: Hook | null;
        _pageContextInit: {
            urlOriginal: string;
            headersOriginal?: unknown;
            headers?: unknown;
        };
        _urlRewrite: string | null;
        _urlHandler: ((url: string) => string) | null;
        isClientSideNavigation: boolean;
    } & {
        urlParsed: import("../utils.js").UrlPublic;
        urlPathname: string;
        url: string;
    } & {
        headers: Record<string, string> | null;
    } & import("../../../shared/getPageFiles.js").PageContextExports & {
        Page: unknown;
        _isHtmlOnly: boolean;
        _passToClient: string[];
        _pageFilePathsLoaded: string[];
    } & {
        __getPageAssets: () => Promise<import("./getPageAssets.js").PageAsset[]>;
    } & {
        routeParams: Record<string, string>;
        pageId: string;
        _urlRewrite: null;
        _httpRequestId: number | null;
        _usesClientRouter: boolean;
        _pageContextAlreadyProvidedByOnPrerenderHook?: true;
        is404: null | boolean;
    } & {
        isClientSideNavigation: boolean;
        _urlHandler: null;
    };
} | {
    documentHtml: string;
    pageContextSerialized: string;
    pageContext: {
        urlOriginal: string;
        headersOriginal?: unknown;
        headers?: unknown;
    } & {
        _objectCreatedByVike: boolean;
        _baseServer: string;
        _baseAssets: string | null;
        _includeAssetsImportedByServer: boolean;
        _pageFilesAll: PageFile[];
        _pageConfigs: PageConfigRuntime[];
        _pageConfigGlobal: PageConfigGlobalRuntime;
        _allPageIds: string[];
        _pageRoutes: PageRoutes;
        _onBeforeRouteHook: Hook | null;
        _pageContextInit: {
            urlOriginal: string;
            headersOriginal?: unknown;
            headers?: unknown;
        };
        _urlRewrite: string | null;
        _urlHandler: ((url: string) => string) | null;
        isClientSideNavigation: boolean;
    } & {
        urlParsed: import("../utils.js").UrlPublic;
        urlPathname: string;
        url: string;
    } & {
        headers: Record<string, string> | null;
    } & import("../../../shared/getPageFiles.js").PageContextExports & {
        Page: unknown;
        _isHtmlOnly: boolean;
        _passToClient: string[];
        _pageFilePathsLoaded: string[];
    } & {
        __getPageAssets: () => Promise<import("./getPageAssets.js").PageAsset[]>;
    } & {
        routeParams: Record<string, string>;
        pageId: string;
        _urlRewrite: null;
        _httpRequestId: number | null;
        _usesClientRouter: boolean;
        _pageContextAlreadyProvidedByOnPrerenderHook?: true;
        is404: null | boolean;
    } & {
        isClientSideNavigation: boolean;
        _urlHandler: null;
    };
}>;
declare function prerender404Page(renderContext: RenderContext, pageContextInit_: Record<string, unknown> | null): Promise<{
    documentHtml: string;
    pageContextSerialized: null;
    pageContext: {
        urlOriginal: string;
        headersOriginal?: unknown;
        headers?: unknown;
    } & {
        _objectCreatedByVike: boolean;
        _baseServer: string;
        _baseAssets: string | null;
        _includeAssetsImportedByServer: boolean;
        _pageFilesAll: PageFile[];
        _pageConfigs: PageConfigRuntime[];
        _pageConfigGlobal: PageConfigGlobalRuntime;
        _allPageIds: string[];
        _pageRoutes: PageRoutes;
        _onBeforeRouteHook: Hook | null;
        _pageContextInit: {
            urlOriginal: string;
            headersOriginal?: unknown;
            headers?: unknown;
        };
        _urlRewrite: string | null;
        _urlHandler: ((url: string) => string) | null;
        isClientSideNavigation: boolean;
    } & {
        urlParsed: import("../utils.js").UrlPublic;
        urlPathname: string;
        url: string;
    } & {
        headers: Record<string, string> | null;
    } & import("../../../shared/getPageFiles.js").PageContextExports & {
        Page: unknown;
        _isHtmlOnly: boolean;
        _passToClient: string[];
        _pageFilePathsLoaded: string[];
    } & {
        __getPageAssets: () => Promise<import("./getPageAssets.js").PageAsset[]>;
    } & {
        routeParams: Record<string, string>;
        pageId: string;
        _urlRewrite: null;
        _httpRequestId: number | null;
        _usesClientRouter: boolean;
        _pageContextAlreadyProvidedByOnPrerenderHook?: true;
        is404: null | boolean;
    } & {
        isClientSideNavigation: boolean;
        _urlHandler: null;
    };
} | {
    documentHtml: string;
    pageContextSerialized: string;
    pageContext: {
        urlOriginal: string;
        headersOriginal?: unknown;
        headers?: unknown;
    } & {
        _objectCreatedByVike: boolean;
        _baseServer: string;
        _baseAssets: string | null;
        _includeAssetsImportedByServer: boolean;
        _pageFilesAll: PageFile[];
        _pageConfigs: PageConfigRuntime[];
        _pageConfigGlobal: PageConfigGlobalRuntime;
        _allPageIds: string[];
        _pageRoutes: PageRoutes;
        _onBeforeRouteHook: Hook | null;
        _pageContextInit: {
            urlOriginal: string;
            headersOriginal?: unknown;
            headers?: unknown;
        };
        _urlRewrite: string | null;
        _urlHandler: ((url: string) => string) | null;
        isClientSideNavigation: boolean;
    } & {
        urlParsed: import("../utils.js").UrlPublic;
        urlPathname: string;
        url: string;
    } & {
        headers: Record<string, string> | null;
    } & import("../../../shared/getPageFiles.js").PageContextExports & {
        Page: unknown;
        _isHtmlOnly: boolean;
        _passToClient: string[];
        _pageFilePathsLoaded: string[];
    } & {
        __getPageAssets: () => Promise<import("./getPageAssets.js").PageAsset[]>;
    } & {
        routeParams: Record<string, string>;
        pageId: string;
        _urlRewrite: null;
        _httpRequestId: number | null;
        _usesClientRouter: boolean;
        _pageContextAlreadyProvidedByOnPrerenderHook?: true;
        is404: null | boolean;
    } & {
        isClientSideNavigation: boolean;
        _urlHandler: null;
    };
} | null>;
type PageContextInitEnhanced = ReturnType<typeof getPageContextInitEnhanced>;
declare function getPageContextInitEnhanced(pageContextInit: {
    urlOriginal: string;
    headersOriginal?: unknown;
    headers?: unknown;
}, renderContext: RenderContext, { ssr: { urlRewrite, urlHandler, isClientSideNavigation } }?: {
    ssr?: {
        urlRewrite: null | string;
        urlHandler: null | ((url: string) => string);
        isClientSideNavigation: boolean;
    };
}): {
    urlOriginal: string;
    headersOriginal?: unknown;
    headers?: unknown;
} & {
    _objectCreatedByVike: boolean;
    _baseServer: string;
    _baseAssets: string | null;
    _includeAssetsImportedByServer: boolean;
    _pageFilesAll: PageFile[];
    _pageConfigs: PageConfigRuntime[];
    _pageConfigGlobal: PageConfigGlobalRuntime;
    _allPageIds: string[];
    _pageRoutes: PageRoutes;
    _onBeforeRouteHook: Hook | null;
    _pageContextInit: {
        urlOriginal: string;
        headersOriginal?: unknown;
        headers?: unknown;
    };
    _urlRewrite: string | null;
    _urlHandler: ((url: string) => string) | null;
    isClientSideNavigation: boolean;
} & {
    urlParsed: import("../utils.js").UrlPublic;
    urlPathname: string;
    url: string;
} & {
    headers: Record<string, string> | null;
};
type RenderContext = {
    pageFilesAll: PageFile[];
    pageConfigs: PageConfigRuntime[];
    pageConfigGlobal: PageConfigGlobalRuntime;
    allPageIds: string[];
    pageRoutes: PageRoutes;
    onBeforeRouteHook: Hook | null;
};
declare function getRenderContext(): Promise<RenderContext>;
