export { getConfigDefinedAt };
export { getConfigDefinedAtOptional };
export { getDefinedAtString };
import { assert, isArray } from '../utils.js';
import pc from '@brillout/picocolors';
import { getExportPath } from './getExportPath.js';
function getConfigDefinedAt(sentenceBegin, configName, definedAtData) {
    return `${begin(sentenceBegin, configName)} at ${getDefinedAtString(definedAtData, configName)}`;
}
function getConfigDefinedAtOptional(sentenceBegin, configName, definedAtData) {
    if (!definedAtData) {
        return `${begin(sentenceBegin, configName)} internally`;
    }
    else {
        return `${begin(sentenceBegin, configName)} at ${getDefinedAtString(definedAtData, configName)}`;
    }
}
function begin(sentenceBegin, configName) {
    return `${sentenceBegin} ${pc.cyan(configName)} defined`;
}
function getDefinedAtString(definedAtData, configName) {
    let files;
    if (isArray(definedAtData)) {
        files = definedAtData;
    }
    else {
        files = [definedAtData];
    }
    assert(files.length >= 1);
    const definedAtString = files
        .map((source) => {
        const { filePathToShowToUser, fileExportPathToShowToUser } = source;
        let s = filePathToShowToUser;
        const exportPath = getExportPath(fileExportPathToShowToUser, configName);
        if (exportPath) {
            s = `${s} > ${pc.cyan(exportPath)}`;
        }
        return s;
    })
        .join(' / ');
    return definedAtString;
}
