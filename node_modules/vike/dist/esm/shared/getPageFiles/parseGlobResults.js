export { parseGlobResults };
// TODO/v1-release: remove old design code, and remove all assertions.
import { assert, hasProp, isCallable, isObject, cast, isArray } from '../utils.js';
import { assertExportValues } from './assert_exports_old_design.js';
import { getPageFileObject } from './getPageFileObject.js';
import { fileTypes } from './fileTypes.js';
import { parsePageConfigs } from '../page-configs/serialize/parsePageConfigs.js';
function parseGlobResults(pageFilesExports) {
    assert(hasProp(pageFilesExports, 'pageFilesLazy', 'object'));
    assert(hasProp(pageFilesExports, 'pageFilesEager', 'object'));
    assert(hasProp(pageFilesExports, 'pageFilesExportNamesLazy', 'object'));
    assert(hasProp(pageFilesExports, 'pageFilesExportNamesEager', 'object'));
    assert(hasProp(pageFilesExports.pageFilesLazy, '.page'));
    assert(hasProp(pageFilesExports.pageFilesLazy, '.page.client') || hasProp(pageFilesExports.pageFilesLazy, '.page.server'));
    assert(hasProp(pageFilesExports, 'pageFilesList', 'string[]'));
    assert(hasProp(pageFilesExports, 'pageConfigsSerialized'));
    assert(hasProp(pageFilesExports, 'pageConfigGlobalSerialized'));
    const { pageConfigsSerialized, pageConfigGlobalSerialized } = pageFilesExports;
    assertPageConfigsSerialized(pageConfigsSerialized);
    assertPageConfigGlobalSerialized(pageConfigGlobalSerialized);
    const { pageConfigs, pageConfigGlobal } = parsePageConfigs(pageConfigsSerialized, pageConfigGlobalSerialized);
    const pageFilesMap = {};
    parseGlobResult(pageFilesExports.pageFilesLazy).forEach(({ filePath, pageFile, globValue }) => {
        pageFile = pageFilesMap[filePath] = pageFilesMap[filePath] ?? pageFile;
        const loadModule = globValue;
        assertLoadModule(loadModule);
        pageFile.loadFile = async () => {
            if (!('fileExports' in pageFile)) {
                pageFile.fileExports = await loadModule();
                assertExportValues(pageFile);
            }
        };
    });
    parseGlobResult(pageFilesExports.pageFilesExportNamesLazy).forEach(({ filePath, pageFile, globValue }) => {
        pageFile = pageFilesMap[filePath] = pageFilesMap[filePath] ?? pageFile;
        const loadModule = globValue;
        assertLoadModule(loadModule);
        pageFile.loadExportNames = async () => {
            if (!('exportNames' in pageFile)) {
                const moduleExports = await loadModule();
                assert(hasProp(moduleExports, 'exportNames', 'string[]'), pageFile.filePath);
                pageFile.exportNames = moduleExports.exportNames;
            }
        };
    });
    // `pageFilesEager` contains `.page.route.js` files
    parseGlobResult(pageFilesExports.pageFilesEager).forEach(({ filePath, pageFile, globValue }) => {
        pageFile = pageFilesMap[filePath] = pageFilesMap[filePath] ?? pageFile;
        const moduleExports = globValue;
        assert(isObject(moduleExports));
        pageFile.fileExports = moduleExports;
    });
    parseGlobResult(pageFilesExports.pageFilesExportNamesEager).forEach(({ filePath, pageFile, globValue }) => {
        pageFile = pageFilesMap[filePath] = pageFilesMap[filePath] ?? pageFile;
        const moduleExports = globValue;
        assert(isObject(moduleExports));
        assert(hasProp(moduleExports, 'exportNames', 'string[]'), pageFile.filePath);
        pageFile.exportNames = moduleExports.exportNames;
    });
    pageFilesExports.pageFilesList.forEach((filePath) => {
        pageFilesMap[filePath] = pageFilesMap[filePath] ?? getPageFileObject(filePath);
    });
    const pageFiles = Object.values(pageFilesMap);
    pageFiles.forEach(({ filePath }) => {
        assert(!filePath.includes('\\'));
    });
    return { pageFiles, pageConfigs, pageConfigGlobal };
}
function parseGlobResult(globObject) {
    const ret = [];
    Object.entries(globObject).forEach(([fileType, globFiles]) => {
        cast(fileType);
        assert(fileTypes.includes(fileType));
        assert(isObject(globFiles));
        Object.entries(globFiles).forEach(([filePath, globValue]) => {
            const pageFile = getPageFileObject(filePath);
            assert(pageFile.fileType === fileType);
            ret.push({ filePath, pageFile, globValue });
        });
    });
    return ret;
}
function assertLoadModule(globValue) {
    assert(isCallable(globValue));
}
function assertPageConfigsSerialized(pageConfigsSerialized) {
    assert(isArray(pageConfigsSerialized));
    pageConfigsSerialized.forEach((pageConfigSerialized) => {
        assert(isObject(pageConfigSerialized));
        assert(hasProp(pageConfigSerialized, 'pageId', 'string'));
        assert(hasProp(pageConfigSerialized, 'routeFilesystem'));
        assert(hasProp(pageConfigSerialized, 'configValuesSerialized'));
    });
}
function assertPageConfigGlobalSerialized(pageConfigGlobalSerialized) {
    assert(hasProp(pageConfigGlobalSerialized, 'configValuesSerialized'));
}
