export { getPageContextFromHooks_isHydration };
export { getPageContextFromHooks_serialized };
export { getPageContextFromServerHooks };
export { getPageContextFromClientHooks };
export { setPageContextInitIsPassedToClient };
export type { PageContextFromServerHooks };
export type { PageContextFromClientHooks };
import type { PageContextExports, PageFile } from '../../shared/getPageFiles.js';
import type { PageConfigRuntime } from '../../shared/page-configs/PageConfig.js';
type PageContext = {
    urlOriginal: string;
    _urlRewrite: string | null;
    _pageFilesAll: PageFile[];
    _pageConfigs: PageConfigRuntime[];
};
type PageContextSerialized = {
    pageId: string;
    _hasPageContextFromServer: true;
};
declare function getPageContextFromHooks_serialized(): PageContextSerialized & {
    routeParams: Record<string, string>;
    _hasPageContextFromServer: true;
};
declare function getPageContextFromHooks_isHydration(pageContext: PageContextSerialized & PageContext & PageContextExports & {
    _hasPageContextFromServer: true;
}): Promise<PageContextSerialized & PageContext & PageContextExports & {
    _hasPageContextFromServer: true;
} & {
    _hasPageContextFromClient: boolean;
}>;
type PageContextFromServerHooks = {
    _hasPageContextFromServer: boolean;
};
declare function getPageContextFromServerHooks(pageContext: {
    pageId: string;
} & PageContext, isErrorPage: boolean): Promise<{
    is404ServerSideRouted: true;
} | {
    is404ServerSideRouted?: undefined;
    pageContextFromServerHooks: PageContextFromServerHooks;
}>;
type PageContextFromClientHooks = {
    _hasPageContextFromClient: boolean;
};
declare function getPageContextFromClientHooks(pageContext: {
    pageId: string;
    _hasPageContextFromServer: boolean;
} & PageContext & PageContextExports, isErrorPage: boolean): Promise<PageContextFromClientHooks>;
declare function setPageContextInitIsPassedToClient(pageContext: Record<string, unknown>): void;
