"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveRedirects = resolveRedirects;
exports.resolveRouteStringRedirect = resolveRouteStringRedirect;
const assertIsNotBrowser_js_1 = require("../../../utils/assertIsNotBrowser.js");
const utils_js_1 = require("../../../shared/utils.js");
const resolveUrlPathname_js_1 = require("../../../shared/route/resolveUrlPathname.js");
const resolveRouteString_js_1 = require("../../../shared/route/resolveRouteString.js");
const picocolors_1 = __importDefault(require("@brillout/picocolors"));
(0, assertIsNotBrowser_js_1.assertIsNotBrowser)(); // Don't bloat the client
// TODO/next-major-release: update
const configSrc = '[vite.config.js > vike({ redirects })]';
function resolveRedirects(redirects, urlPathname) {
    for (const [urlSource, urlTarget] of Object.entries(redirects)) {
        const urlResolved = resolveRouteStringRedirect(urlSource, urlTarget, urlPathname);
        if (urlResolved)
            return urlResolved;
    }
    return null;
}
function resolveRouteStringRedirect(urlSource, urlTarget, urlPathname) {
    (0, resolveRouteString_js_1.assertRouteString)(urlSource, `${configSrc} Invalid`);
    // Is allowing any protocol a safety issue? https://github.com/vikejs/vike/pull/1292#issuecomment-1828043917
    (0, utils_js_1.assertUsageUrlRedirectTarget)(urlTarget, `${configSrc} The URL redirection target`, true);
    assertParams(urlSource, urlTarget);
    const match = (0, resolveRouteString_js_1.resolveRouteString)(urlSource, urlPathname);
    if (!match)
        return null;
    const urlResolved = (0, resolveUrlPathname_js_1.resolveUrlPathname)(urlTarget, match.routeParams);
    if (urlResolved === urlPathname)
        return null;
    (0, utils_js_1.assert)((0, utils_js_1.isUrlRedirectTarget)(urlResolved));
    return urlResolved;
}
function assertParams(urlSource, urlTarget) {
    const routeSegments = urlTarget.split('/');
    routeSegments.forEach((routeSegment) => {
        if (routeSegment.startsWith('@') || routeSegment.startsWith('*')) {
            const segments = urlSource.split('/');
            (0, utils_js_1.assertUsage)(segments.includes(routeSegment), `${configSrc} The redirection source URL ${picocolors_1.default.string(urlSource)} is missing the URL parameter ${picocolors_1.default.string(routeSegment)} used by the redirection target URL ${picocolors_1.default.string(urlTarget)}`);
        }
    });
}
