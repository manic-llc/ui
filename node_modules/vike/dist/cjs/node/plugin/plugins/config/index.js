"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveVikeConfig = resolveVikeConfig;
const assertVikeConfig_js_1 = require("./assertVikeConfig.js");
const utils_js_1 = require("../../utils.js");
const pickFirst_js_1 = require("./pickFirst.js");
const resolveBase_js_1 = require("./resolveBase.js");
const getVikeConfig_js_1 = require("../importUserCode/v1-design/getVikeConfig.js");
const picocolors_1 = __importDefault(require("@brillout/picocolors"));
function resolveVikeConfig(vikeConfig) {
    return {
        name: 'vike:resolveVikeConfig',
        enforce: 'pre',
        async configResolved(config) {
            const promise = getConfigVikPromise(vikeConfig, config);
            config.configVikePromise = promise;
            await promise;
        }
    };
}
async function getConfigVikPromise(vikeConfig, config) {
    const fromPluginOptions = (vikeConfig ?? {});
    const fromViteConfig = (config.vike ?? {});
    const configs = [fromPluginOptions, fromViteConfig];
    (0, assertVikeConfig_js_1.assertVikeConfig)(fromViteConfig, ({ prop, errMsg }) => `vite.config.js#vike.${prop} ${errMsg}`);
    // TODO/v1-release: deprecate this
    (0, assertVikeConfig_js_1.assertVikeConfig)(fromPluginOptions, ({ prop, errMsg }) => `vite.config.js > vike option ${prop} ${errMsg}`);
    const crawlWithGit = fromPluginOptions.crawl?.git ?? null;
    const { globalVikeConfig: fromPlusConfigFile } = await (0, getVikeConfig_js_1.getVikeConfig)(config, (0, utils_js_1.isDev2)(config), { crawlWithGit });
    configs.push(fromPlusConfigFile);
    (0, assertVikeConfig_js_1.assertVikeConfig)(fromPlusConfigFile, ({ prop, errMsg }) => {
        // TODO: add config file path ?
        return `config ${picocolors_1.default.cyan(prop)} ${errMsg}`;
    });
    const { baseServer, baseAssets } = (0, resolveBase_js_1.resolveBase)(configs, config);
    const configVike = {
        disableAutoFullBuild: (0, pickFirst_js_1.pickFirst)(configs.map((c) => c.disableAutoFullBuild)) ?? null,
        prerender: resolvePrerenderOptions(configs),
        includeAssetsImportedByServer: (0, pickFirst_js_1.pickFirst)(configs.map((c) => c.includeAssetsImportedByServer)) ?? true,
        baseServer,
        baseAssets,
        redirects: merge(configs.map((c) => c.redirects)) ?? {},
        disableUrlNormalization: (0, pickFirst_js_1.pickFirst)(configs.map((c) => c.disableUrlNormalization)) ?? false,
        trailingSlash: (0, pickFirst_js_1.pickFirst)(configs.map((c) => c.trailingSlash)) ?? false,
        crawl: {
            git: crawlWithGit
        }
    };
    return configVike;
}
function resolvePrerenderOptions(configs) {
    if (!configs.some((c) => c.prerender)) {
        return false;
    }
    const configsPrerender = configs.map((c) => c.prerender).filter(isObject);
    return {
        partial: (0, pickFirst_js_1.pickFirst)(configsPrerender.map((c) => c.partial)) ?? false,
        noExtraDir: (0, pickFirst_js_1.pickFirst)(configsPrerender.map((c) => c.noExtraDir)) ?? false,
        parallel: (0, pickFirst_js_1.pickFirst)(configsPrerender.map((c) => c.parallel)) ?? true,
        disableAutoRun: (0, pickFirst_js_1.pickFirst)(configsPrerender.map((c) => c.disableAutoRun)) ?? false
    };
}
function isObject(p) {
    return typeof p === 'object';
}
function merge(objs) {
    const obj = {};
    objs.forEach((e) => {
        Object.assign(obj, e);
    });
    return obj;
}
