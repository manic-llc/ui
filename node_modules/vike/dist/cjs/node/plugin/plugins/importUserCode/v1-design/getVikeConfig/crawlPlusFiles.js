"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.crawlPlusFiles = crawlPlusFiles;
const utils_js_1 = require("../../../../utils.js");
const path_1 = __importDefault(require("path"));
const promises_1 = __importDefault(require("fs/promises"));
const fast_glob_1 = __importDefault(require("fast-glob"));
const child_process_1 = require("child_process");
const util_1 = require("util");
const picocolors_1 = __importDefault(require("@brillout/picocolors"));
const transpileAndExecuteFile_js_1 = require("./transpileAndExecuteFile.js");
const execA = (0, util_1.promisify)(child_process_1.exec);
const TOO_MANY_UNTRACKED_FILES = 5;
(0, utils_js_1.assertIsNotProductionRuntime)();
(0, utils_js_1.assertIsSingleModuleInstance)('crawlPlusFiles.ts');
let gitIsNotUsable = false;
async function crawlPlusFiles(userRootDir, outDirAbsoluteFilesystem, isDev, crawlWithGit) {
    (0, utils_js_1.assertPosixPath)(userRootDir);
    (0, utils_js_1.assertPosixPath)(outDirAbsoluteFilesystem);
    let outDirRelativeFromUserRootDir = path_1.default.posix.relative(userRootDir, outDirAbsoluteFilesystem);
    if (outDirRelativeFromUserRootDir.startsWith('../')) {
        // config.outDir is outside of config.root => it's going to be ignored anyways
        outDirRelativeFromUserRootDir = null;
    }
    (0, utils_js_1.assert)(outDirRelativeFromUserRootDir === null ||
        /* Not true if outDirRelativeFromUserRootDir starts with a hidden directory (i.e. a directory with a name that starts with `.`)
        !outDirRelativeFromUserRootDir.startsWith('.') &&
        */
        (!outDirRelativeFromUserRootDir.startsWith('./') &&
            //
            !outDirRelativeFromUserRootDir.startsWith('../')));
    const timeBefore = new Date().getTime();
    // Crawl
    let files = [];
    const res = crawlWithGit !== false && (await gitLsFiles(userRootDir, outDirRelativeFromUserRootDir));
    if (res &&
        // Fallback to fast-glob for users that dynamically generate plus files. (Assuming that no plus file is found because of the user's .gitignore list.)
        res.files.length > 0) {
        files = res.files;
        // We cannot find files inside symlink directories with `$ git ls-files` => we use fast-glob
        files.push(...(await crawlSymlinkDirs(res.symlinkDirs, userRootDir, outDirRelativeFromUserRootDir)));
    }
    else {
        files = await fastGlob(userRootDir, outDirRelativeFromUserRootDir);
    }
    // Filter build files
    files = files.filter((filePath) => !(0, transpileAndExecuteFile_js_1.isTemporaryBuildFile)(filePath));
    // Check performance
    {
        const timeAfter = new Date().getTime();
        const timeSpent = timeAfter - timeBefore;
        if (isDev) {
            // We only warn in dev, because while building it's expected to take a long time as crawling is competing for resources with other tasks.
            // Although, in dev, it's also competing for resources e.g. with Vite's `optimizeDeps`.
            (0, utils_js_1.assertWarning)(timeSpent < 3 * 1000, `Crawling your ${picocolors_1.default.cyan('+')} files took an unexpected long time (${(0, utils_js_1.humanizeTime)(timeSpent)}). If you consistently get this warning, then consider reaching out on GitHub.`, {
                onlyOnce: 'slow-crawling'
            });
        }
    }
    // Normalize
    const plusFiles = files.map((filePath) => {
        // Both `$ git-ls files` and fast-glob return posix paths
        (0, utils_js_1.assertPosixPath)(filePath);
        (0, utils_js_1.assert)(!filePath.startsWith(userRootDir));
        const filePathAbsoluteUserRootDir = path_1.default.posix.join('/', filePath);
        return { filePathAbsoluteUserRootDir };
    });
    return plusFiles;
}
// Same as fastGlob() but using `$ git ls-files`
async function gitLsFiles(userRootDir, outDirRelativeFromUserRootDir) {
    if (gitIsNotUsable)
        return null;
    // Preserve UTF-8 file paths.
    // https://github.com/vikejs/vike/issues/1658
    // https://stackoverflow.com/questions/22827239/how-to-make-git-properly-display-utf-8-encoded-pathnames-in-the-console-window/22828826#22828826
    // https://stackoverflow.com/questions/15884180/how-do-i-override-git-configuration-options-by-command-line-parameters/15884261#15884261
    const preserveUTF8 = '-c core.quotepath=off';
    const ignoreAsPatterns = getIgnoreAsPatterns(outDirRelativeFromUserRootDir);
    const ignoreAsFilterFn = getIgnoreAsFilterFn(outDirRelativeFromUserRootDir);
    const cmd = [
        'git',
        preserveUTF8,
        'ls-files',
        // We don't filter because:
        //  - It would skip symlink directories
        //  - Performance gain seems negligible: https://github.com/vikejs/vike/pull/1688#issuecomment-2166206648
        // ...scriptFileExtensionList.map((ext) => `"**/+*.${ext}"`),
        // Performance gain is non-negligible.
        //  - https://github.com/vikejs/vike/pull/1688#issuecomment-2166206648
        //  - When node_modules/ is untracked the performance gain could be significant?
        ...ignoreAsPatterns.map((pattern) => `--exclude="${pattern}"`),
        // --others --exclude-standard => list untracked files (--others) while using .gitignore (--exclude-standard)
        // --cached => list tracked files
        // --stage => get file modes which we use to find symlink directories
        '--others --exclude-standard --cached --stage'
    ].join(' ');
    let resultLines;
    let filesDeleted;
    try {
        ;
        [resultLines, filesDeleted] = await Promise.all([
            // Main command
            runCmd1(cmd, userRootDir),
            // Get tracked but deleted files
            runCmd1('git ls-files --deleted', userRootDir)
        ]);
    }
    catch (err) {
        if (await isGitNotUsable(userRootDir)) {
            gitIsNotUsable = true;
            return null;
        }
        throw err;
    }
    const filePaths = resultLines.map(parseGitLsResultLine);
    // If there are too many files without mode we fallback to fast-glob
    if (filePaths.filter((f) => !f.mode).length > TOO_MANY_UNTRACKED_FILES)
        return null;
    const symlinkDirs = [];
    const files = [];
    for (const { filePath, mode } of filePaths) {
        // Deleted?
        if (filesDeleted.includes(filePath))
            continue;
        // We have to repeat the same exclusion logic here because the option --exclude of `$ git ls-files` only applies to untracked files. (We use --exclude only to speed up the `$ git ls-files` command.)
        if (!ignoreAsFilterFn(filePath))
            continue;
        // Symlink directory?
        {
            const isSymlinkDir = await isSymlinkDirectory(mode, filePath, userRootDir);
            if (isSymlinkDir) {
                symlinkDirs.push(filePath);
                continue;
            }
            // Skip deleted files and non-symlink directories
            if (isSymlinkDir === null) {
                continue;
            }
        }
        // + file?
        if (!path_1.default.posix.basename(filePath).startsWith('+'))
            continue;
        // JavaScript file?
        if (!(0, utils_js_1.isScriptFile)(filePath))
            continue;
        files.push(filePath);
    }
    return { files, symlinkDirs };
}
// Same as gitLsFiles() but using fast-glob
async function fastGlob(userRootDir, outDirRelativeFromUserRootDir) {
    const files = await (0, fast_glob_1.default)(`**/+*.${utils_js_1.scriptFileExtensions}`, {
        ignore: getIgnoreAsPatterns(outDirRelativeFromUserRootDir),
        cwd: userRootDir,
        dot: false
    });
    // Make build deterministic, in order to get a stable generated hash for dist/client/assets/entries/entry-client-routing.${hash}.js
    // https://github.com/vikejs/vike/pull/1750
    files.sort();
    return files;
}
// Same as getIgnoreAsFilterFn() but as glob pattern
function getIgnoreAsPatterns(outDirRelativeFromUserRootDir) {
    const ignoreAsPatterns = [
        '**/node_modules/**',
        // Allow:
        // ```
        // +Page.js
        // +Page.telefunc.js
        // ```
        '**/*.telefunc.*'
    ];
    if (outDirRelativeFromUserRootDir) {
        (0, utils_js_1.assert)(!outDirRelativeFromUserRootDir.startsWith('/'));
        ignoreAsPatterns.push(`${outDirRelativeFromUserRootDir}/**`);
    }
    return ignoreAsPatterns;
}
// Same as getIgnoreAsPatterns() but for Array.filter()
function getIgnoreAsFilterFn(outDirRelativeFromUserRootDir) {
    (0, utils_js_1.assert)(outDirRelativeFromUserRootDir === null || !outDirRelativeFromUserRootDir.startsWith('/'));
    return (file) => !file.includes('node_modules/') &&
        !file.includes('.telefunc.') &&
        (outDirRelativeFromUserRootDir === null || !file.startsWith(`${outDirRelativeFromUserRootDir}/`));
}
// Whether Git is installed and whether we can use it
async function isGitNotUsable(userRootDir) {
    // Check Git version
    {
        const res = await runCmd2('git --version', userRootDir);
        if ('err' in res)
            return true;
        let { stdout, stderr } = res;
        (0, utils_js_1.assert)(stderr === '');
        const prefix = 'git version ';
        (0, utils_js_1.assert)(stdout.startsWith(prefix));
        const gitVersion = stdout.slice(prefix.length);
        //  - Works with Git 2.43.1 but also (most certainly) with earlier versions.
        //    - We didn't bother test which is the earliest verision that works.
        //  - Git 2.32.0 doesn't seem to work: https://github.com/vikejs/vike/discussions/1549
        //    - Maybe it's because of StackBlitz: looking at the release notes, Git 2.32.0 should be working.
        if (!(0, utils_js_1.isVersionOrAbove)(gitVersion, '2.43.1'))
            return true;
    }
    // Is userRootDir inside a Git repository?
    {
        const res = await runCmd2('git rev-parse --is-inside-work-tree', userRootDir);
        if ('err' in res)
            return true;
        let { stdout, stderr } = res;
        (0, utils_js_1.assert)(stderr === '');
        (0, utils_js_1.assert)(stdout === 'true');
        return false;
    }
}
async function crawlSymlinkDirs(symlinkDirs, userRootDir, outDirRelativeFromUserRootDir) {
    const filesInSymlinkDirs = (await Promise.all(symlinkDirs.map(async (symlinkDir) => (await fastGlob(path_1.default.posix.join(userRootDir, symlinkDir), outDirRelativeFromUserRootDir)).map((filePath) => path_1.default.posix.join(symlinkDir, filePath))))).flat();
    return filesInSymlinkDirs;
}
// Parse:
// ```
// some/not/tracked/path
// 100644 f6928073402b241b468b199893ff6f4aed0b7195 0\tpages/index/+Page.tsx
// ```
function parseGitLsResultLine(resultLine) {
    const [part1, part2, ...rest] = resultLine.split('\t');
    (0, utils_js_1.assert)(part1);
    (0, utils_js_1.assert)(rest.length === 0);
    // Git doesn't provide the mode for untracked paths.
    // `resultLine` is:
    // ```
    // some/not/tracked/path
    // ```
    if (part2 === undefined) {
        return { filePath: part1, mode: null };
    }
    (0, utils_js_1.assert)(part2);
    // `resultLine` is:
    // ```
    // 100644 f6928073402b241b468b199893ff6f4aed0b7195 0\tpages/index/+Page.tsx
    // ```
    const [mode, _, __, ...rest2] = part1.split(' ');
    (0, utils_js_1.assert)(mode && _ && __ && rest2.length === 0);
    return { filePath: part2, mode };
}
async function isSymlinkDirectory(mode, filePath, userRootDir) {
    const filePathAbsolute = path_1.default.posix.join(userRootDir, filePath);
    let stats = null;
    let isSymlink = false;
    if (mode === '120000') {
        isSymlink = true;
    }
    else if (mode === null) {
        // `$ git ls-files` doesn't provide the mode when Git doesn't track the path
        stats = await getFileStats(filePathAbsolute);
        if (stats === null)
            return null;
        isSymlink = stats.isSymbolicLink();
        if (!isSymlink && stats.isDirectory())
            return null;
    }
    else {
        (0, utils_js_1.assert)(mode);
    }
    if (!isSymlink)
        return false;
    if (!stats)
        stats = await getFileStats(filePathAbsolute);
    if (stats === null)
        return null;
    const isDirectory = stats.isDirectory();
    return isDirectory;
}
async function getFileStats(filePathAbsolute) {
    let stats;
    try {
        stats = await promises_1.default.lstat(filePathAbsolute);
    }
    catch (err) {
        // File was deleted, usually a temporary file such as +config.js.build-j95xb988fpln.mjs
        // ENOENT: no such file or directory
        (0, utils_js_1.assert)(err.code === 'ENOENT');
        return null;
    }
    return stats;
}
async function runCmd1(cmd, cwd) {
    const { stdout } = await execA(cmd, { cwd });
    /* Not always true: https://github.com/vikejs/vike/issues/1440#issuecomment-1892831303
    assert(res.stderr === '')
    */
    return stdout.toString().split('\n').filter(Boolean);
}
async function runCmd2(cmd, cwd) {
    let res;
    try {
        res = await execA(cmd, { cwd });
    }
    catch (err) {
        return { err };
    }
    let { stdout, stderr } = res;
    stdout = stdout.toString().trim();
    stderr = stderr.toString().trim();
    return { stdout, stderr };
}
