"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getVirtualFilePageConfigValuesAll = getVirtualFilePageConfigValuesAll;
const utils_js_1 = require("../../../utils.js");
const virtualFilePageConfigValuesAll_js_1 = require("../../../../shared/virtual-files/virtualFilePageConfigValuesAll.js");
const getVikeConfig_js_1 = require("./getVikeConfig.js");
const extractAssetsQuery_js_1 = require("../../../../shared/extractAssetsQuery.js");
const debug_js_1 = require("./debug.js");
const isRuntimeEnvMatch_js_1 = require("./isRuntimeEnvMatch.js");
const serializeConfigValues_js_1 = require("../../../../../shared/page-configs/serialize/serializeConfigValues.js");
const getConfigVike_js_1 = require("../../../../shared/getConfigVike.js");
const fixServerAssets_js_1 = require("../../buildConfig/fixServerAssets.js");
const getConfigValueBuildTime_js_1 = require("../../../../../shared/page-configs/getConfigValueBuildTime.js");
async function getVirtualFilePageConfigValuesAll(id, isDev, config) {
    const result = (0, virtualFilePageConfigValuesAll_js_1.isVirtualFileIdPageConfigValuesAll)(id);
    (0, utils_js_1.assert)(result);
    /* This assertion fails when using includeAssetsImportedByServer
    {
      const isForClientSide = !config.build.ssr
      assert(result.isForClientSide === isForClientSide)
    }
    */
    const { pageId, isForClientSide } = result;
    const { pageConfigs } = await (0, getVikeConfig_js_1.getVikeConfig)(config, isDev, { tolerateInvalidConfig: true });
    const pageConfig = pageConfigs.find((pageConfig) => pageConfig.pageId === pageId);
    (0, utils_js_1.assert)(pageConfig, { id, pageId });
    const configVike = await (0, getConfigVike_js_1.getConfigVike)(config);
    const code = getLoadConfigValuesAll(pageConfig, isForClientSide, pageId, configVike.includeAssetsImportedByServer, isDev);
    (0, debug_js_1.debug)(id, isForClientSide ? 'CLIENT-SIDE' : 'SERVER-SIDE', code);
    return code;
}
function getLoadConfigValuesAll(pageConfig, isForClientSide, pageId, includeAssetsImportedByServer, isDev) {
    const lines = [];
    const importStatements = [];
    const isClientRouting = (0, getConfigValueBuildTime_js_1.getConfigValueBuildTime)(pageConfig, 'clientRouting', 'boolean')?.value ?? false;
    lines.push('export const configValuesSerialized = {');
    lines.push(...(0, serializeConfigValues_js_1.serializeConfigValues)(pageConfig, importStatements, (configEnv) => (0, isRuntimeEnvMatch_js_1.isRuntimeEnvMatch)(configEnv, { isForClientSide, isClientRouting, isDev }), { isEager: false }, ''));
    lines.push('};');
    if (!(0, fixServerAssets_js_1.fixServerAssets_isEnabled)() && includeAssetsImportedByServer && isForClientSide && !isDev) {
        importStatements.push(`import '${(0, extractAssetsQuery_js_1.extractAssetsAddQuery)((0, virtualFilePageConfigValuesAll_js_1.getVirtualFileIdPageConfigValuesAll)(pageId, false))}'`);
    }
    const code = [...importStatements, ...lines].join('\n');
    return code;
}
