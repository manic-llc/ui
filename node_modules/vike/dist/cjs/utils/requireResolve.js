"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.requireResolve = requireResolve;
const assert_js_1 = require("./assert.js");
const assertIsNotBrowser_js_1 = require("./assertIsNotBrowser.js");
const assertIsNotProductionRuntime_js_1 = require("./assertIsNotProductionRuntime.js");
const filesystemPathHandling_js_1 = require("./filesystemPathHandling.js");
const isScriptFile_js_1 = require("./isScriptFile.js");
const module_1 = require("module");
// @ts-ignore Shimmed by dist-cjs-fixup.js for CJS build.
const importMetaUrl = `file://${__filename}`;
const require_ = (0, module_1.createRequire)(importMetaUrl);
(0, assertIsNotBrowser_js_1.assertIsNotBrowser)();
(0, assertIsNotProductionRuntime_js_1.assertIsNotProductionRuntime)();
// We still can't use import.meta.resolve() as of 23.1.0 (November 2024) because `parent` argument requires an experimental flag.
// - https://stackoverflow.com/questions/54977743/do-require-resolve-for-es-modules#comment139581675_62272600
function requireResolve(importPath, cwd) {
    (0, filesystemPathHandling_js_1.assertPosixPath)(cwd);
    const clean = addFileExtensionsToRequireResolve();
    importPath = removeFileExtention(importPath);
    let importedFile;
    try {
        importedFile = require_.resolve(importPath, { paths: [cwd] });
    }
    catch {
        importedFile = null;
    }
    finally {
        clean();
    }
    if (importedFile) {
        importedFile = (0, filesystemPathHandling_js_1.toPosixPath)(importedFile);
    }
    return importedFile;
}
function removeFileExtention(importPath) {
    for (const ext of isScriptFile_js_1.scriptFileExtensionList) {
        const suffix = `.${ext}`;
        if (importPath.endsWith(suffix)) {
            return importPath.slice(0, -1 * suffix.length);
        }
    }
    return importPath;
}
function addFileExtensionsToRequireResolve() {
    const added = [];
    isScriptFile_js_1.scriptFileExtensionList.forEach((ext) => {
        (0, assert_js_1.assert)(!ext.includes('.'));
        ext = `.${ext}`;
        if (!require.extensions[ext]) {
            require.extensions[ext] = require.extensions['.js'];
            added.push(ext);
        }
    });
    const clean = () => {
        added.forEach((ext) => {
            delete require.extensions[ext];
        });
    };
    return clean;
}
