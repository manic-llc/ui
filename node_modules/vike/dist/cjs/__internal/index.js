"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.route = route;
exports.getPagesAndRoutes = getPagesAndRoutes;
exports.getPageFilesAllSafe = getPageFilesAllSafe;
const index_js_1 = require("../shared/route/index.js");
const getPageFiles_js_1 = require("../shared/getPageFiles.js");
const globalContext_js_1 = require("../node/runtime/globalContext.js");
const assertNodeEnv_js_1 = require("../utils/assertNodeEnv.js");
const renderPageAlreadyRouted_js_1 = require("../node/runtime/renderPage/renderPageAlreadyRouted.js");
/**
 * Used by {@link https://github.com/magne4000/vite-plugin-vercel|vite-plugin-vercel}
 * to compute some rewrite rules and extract { isr } configs.
 * Needs `import 'vike/__internal/setup'`
 * @param config
 */
async function getPagesAndRoutes() {
    (0, assertNodeEnv_js_1.handleNodeEnv_vitePluginVercel)();
    const renderContext = await (0, renderPageAlreadyRouted_js_1.getRenderContext)();
    const { 
    //
    pageRoutes, pageFilesAll, pageConfigs, allPageIds } = renderContext;
    return {
        pageRoutes,
        pageFilesAll,
        pageConfigs,
        allPageIds
    };
}
// TODO: make it cleaner once the internal refactoring about global configs is done.
// Demo usage: https://github.com/vikejs/vike/pull/1823
async function getPageFilesAllSafe(isProduction) {
    await (0, globalContext_js_1.initGlobalContext_getGlobalContextAsync)(isProduction);
    const globalContext = (0, globalContext_js_1.getGlobalContext)();
    const pageFilesAll = await (0, getPageFiles_js_1.getPageFilesAll)(false, globalContext.isProduction);
    return pageFilesAll;
}
async function route(pageContext) {
    const pageContextFromRoute = await (0, index_js_1.route)(pageContext);
    // Old interface
    return { pageContextAddendum: pageContextFromRoute };
}
