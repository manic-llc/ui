"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfigValueBuildTime = getConfigValueBuildTime;
const utils_js_1 = require("../utils.js");
const getConfigValue_js_1 = require("./getConfigValue.js");
const assertIsNotProductionRuntime_js_1 = require("../../utils/assertIsNotProductionRuntime.js");
(0, assertIsNotProductionRuntime_js_1.assertIsNotProductionRuntime)();
function getConfigValueBuildTime(pageConfig, configName, type) {
    const configValue = getConfigValue(pageConfig, configName);
    if (!configValue)
        return null;
    return (0, getConfigValue_js_1.getConfigValueTyped)(configValue, configName, type);
}
function getConfigValue(pageConfig, configName) {
    const { configValueSources, configValuesComputed, configDefinitions } = pageConfig;
    const configValueComputed = configValuesComputed[configName];
    if (configValueComputed) {
        return {
            type: 'computed',
            value: configValueComputed.value,
            definedAtData: null
        };
    }
    const sources = configValueSources[configName];
    if (!sources)
        return null;
    const configDef = configDefinitions[configName];
    (0, utils_js_1.assert)(configDef);
    if (!configDef.cumulative) {
        const configValueSource = sources[0];
        (0, utils_js_1.assert)(configValueSource);
        (0, utils_js_1.assert)(configValueSource.isOverriden === false);
        (0, utils_js_1.assert)(sources.slice(1).every((s) => s.isOverriden === true));
        (0, utils_js_1.assert)('value' in configValueSource);
        return {
            type: 'standard',
            value: configValueSource.value,
            definedAtData: getDefinedAtFile(configValueSource)
        };
    }
    else {
        const { value, definedAtData } = mergeCumulative(sources);
        (0, utils_js_1.assert)(value.length === definedAtData.length);
        return {
            type: 'cumulative',
            value,
            definedAtData
        };
    }
}
function mergeCumulative(configValueSources) {
    const value = [];
    const definedAtData = [];
    configValueSources.forEach((configValueSource) => {
        (0, utils_js_1.assert)(configValueSource.isOverriden === false);
        (0, utils_js_1.assert)(configValueSource.configEnv.config === true);
        (0, utils_js_1.assert)('value' in configValueSource);
        value.push(configValueSource.value);
        definedAtData.push(getDefinedAtFile(configValueSource));
    });
    return { value, definedAtData };
}
function getDefinedAtFile(configValueSource) {
    return {
        filePathToShowToUser: configValueSource.definedAtFilePath.filePathToShowToUser,
        fileExportPathToShowToUser: configValueSource.definedAtFilePath.fileExportPathToShowToUser
    };
}
